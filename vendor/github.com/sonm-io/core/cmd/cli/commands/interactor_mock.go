// Automatically generated by MockGen. DO NOT EDIT!
// Source: cmd/cli/commands/interactor.go

package commands

import (
	gomock "github.com/golang/mock/gomock"
	proto "github.com/sonm-io/core/proto"
	context "golang.org/x/net/context"
)

// Mock of CliInteractor interface
type MockCliInteractor struct {
	ctrl     *gomock.Controller
	recorder *_MockCliInteractorRecorder
}

// Recorder for MockCliInteractor (not exported)
type _MockCliInteractorRecorder struct {
	mock *MockCliInteractor
}

func NewMockCliInteractor(ctrl *gomock.Controller) *MockCliInteractor {
	mock := &MockCliInteractor{ctrl: ctrl}
	mock.recorder = &_MockCliInteractorRecorder{mock}
	return mock
}

func (_m *MockCliInteractor) EXPECT() *_MockCliInteractorRecorder {
	return _m.recorder
}

func (_m *MockCliInteractor) HubPing(_param0 context.Context) (*proto.PingReply, error) {
	ret := _m.ctrl.Call(_m, "HubPing", _param0)
	ret0, _ := ret[0].(*proto.PingReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCliInteractorRecorder) HubPing(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HubPing", arg0)
}

func (_m *MockCliInteractor) HubStatus(_param0 context.Context) (*proto.HubStatusReply, error) {
	ret := _m.ctrl.Call(_m, "HubStatus", _param0)
	ret0, _ := ret[0].(*proto.HubStatusReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCliInteractorRecorder) HubStatus(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HubStatus", arg0)
}

func (_m *MockCliInteractor) MinerList(_param0 context.Context) (*proto.ListReply, error) {
	ret := _m.ctrl.Call(_m, "MinerList", _param0)
	ret0, _ := ret[0].(*proto.ListReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCliInteractorRecorder) MinerList(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MinerList", arg0)
}

func (_m *MockCliInteractor) MinerStatus(minerID string, appCtx context.Context) (*proto.InfoReply, error) {
	ret := _m.ctrl.Call(_m, "MinerStatus", minerID, appCtx)
	ret0, _ := ret[0].(*proto.InfoReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCliInteractorRecorder) MinerStatus(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MinerStatus", arg0, arg1)
}

func (_m *MockCliInteractor) TaskList(appCtx context.Context, minerID string) (*proto.StatusMapReply, error) {
	ret := _m.ctrl.Call(_m, "TaskList", appCtx, minerID)
	ret0, _ := ret[0].(*proto.StatusMapReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCliInteractorRecorder) TaskList(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TaskList", arg0, arg1)
}

func (_m *MockCliInteractor) TaskLogs(appCtx context.Context, req *proto.TaskLogsRequest) (proto.Hub_TaskLogsClient, error) {
	ret := _m.ctrl.Call(_m, "TaskLogs", appCtx, req)
	ret0, _ := ret[0].(proto.Hub_TaskLogsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCliInteractorRecorder) TaskLogs(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TaskLogs", arg0, arg1)
}

func (_m *MockCliInteractor) TaskStart(appCtx context.Context, req *proto.HubStartTaskRequest) (*proto.HubStartTaskReply, error) {
	ret := _m.ctrl.Call(_m, "TaskStart", appCtx, req)
	ret0, _ := ret[0].(*proto.HubStartTaskReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCliInteractorRecorder) TaskStart(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TaskStart", arg0, arg1)
}

func (_m *MockCliInteractor) TaskStatus(appCtx context.Context, taskID string) (*proto.TaskStatusReply, error) {
	ret := _m.ctrl.Call(_m, "TaskStatus", appCtx, taskID)
	ret0, _ := ret[0].(*proto.TaskStatusReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCliInteractorRecorder) TaskStatus(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TaskStatus", arg0, arg1)
}

func (_m *MockCliInteractor) TaskStop(appCtx context.Context, taskID string) (*proto.StopTaskReply, error) {
	ret := _m.ctrl.Call(_m, "TaskStop", appCtx, taskID)
	ret0, _ := ret[0].(*proto.StopTaskReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCliInteractorRecorder) TaskStop(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TaskStop", arg0, arg1)
}
